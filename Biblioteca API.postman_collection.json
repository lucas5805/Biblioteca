{
	"info": {
		"_postman_id": "980a2262-5c64-4a5c-a0bb-de720ce06365",
		"name": "Biblioteca API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37486970"
	},
	"item": [
		{
			"name": "Libros",
			"item": [
				{
					"name": "Listar libros",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/libros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"libros"
							]
						},
						"description": "Este endpoint envía una solicitud HTTP GET para recuperar una lista de Libros del servidor. La respuesta de esta solicitud puede documentarse como un esquema JSON para proporcionar una estructura clara de los datos que devuelve la API."
					},
					"response": [
						{
							"name": "Listar libros",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "date",
									"value": "Thu, 08 Aug 2024 11:23:19 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "4888"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"es\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Gestión de Libros</title>\n        <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            width: 85%;\n            margin: auto;\n            overflow: hidden;\n        }\n        header {\n            background: #333;\n            color: #fff;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #0056b3 3px solid;\n        }\n        header h1 {\n            text-align: center;\n            margin: 0;\n            padding: 0;\n        }\n        header a {\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n        #main {\n            padding: 20px;\n            background: #fff;\n            margin-top: 30px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 20px;\n        }\n        table, th, td {\n            border: 1px solid black;\n        }\n        th, td {\n            padding: 15px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        .form-container-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n        }\n        .form-container {\n            display: none;\n            margin-top: 20px;\n            width: 50%;\n            margin: 20px auto;\n            text-align: center;\n        }\n        .form-container form {\n            margin-bottom: 20px;\n        }\n        .form-container input, .form-container button {\n            display: block;\n            width: 60%;\n            padding: 10px;\n            margin: 0 auto 10px auto;\n        }\n        .form-container button {\n            background: #333;\n            color: #fff;\n            border: 0;\n            cursor: pointer;\n        }\n        .form-container button:hover {\n            background: #0056b3;\n        }\n        .actions button {\n            margin: 5px 0;\n        }\n        .toggle-buttons {\n            display: flex;\n            justify-content: center;\n            margin-top: 20px;\n        }\n        .toggle-buttons button {\n            background: #333;\n            color: #fff;\n            border: 0;\n            padding: 10px 20px;\n            margin: 0 10px;\n            cursor: pointer;\n        }\n        .toggle-buttons button:hover {\n            background: #0056b3;\n        }\n    </style>\n        <script src=\"/static/js/script.js\"></script>\n        <script>\n        function showForm(formId) {\n            document.getElementById('add-modify-form').style.display = 'none';\n            document.getElementById('delete-form').style.display = 'none';\n            document.getElementById(formId).style.display = 'block';\n        }\n\n        window.onload = function() {\n            loadLibros();\n        };\n    </script>\n    </head>\n    <body>\n        <header>\n            <div class=\"container\">\n                <h1>Gestión de Libros</h1>\n            </div>\n        </header>\n        <div id=\"main\" class=\"container\">\n            <h2>Listado de Libros</h2>\n            <div id=\"libros-container\">\n                <table id=\"libros-table\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>Nombre</th>\n                            <th>Disponibilidad</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"libros-tbody\">\n                        <!-- Libros se cargarán aquí -->\n            \n                    </tbody>\n                </table>\n            </div>\n            <div class=\"toggle-buttons\">\n                <button onclick=\"showForm('add-modify-form')\">Añadir/Modificar</button>\n                <button onclick=\"showForm('delete-form')\">Borrar</button>\n            </div>\n            <div class=\"form-container-wrapper\">\n                <div id=\"add-modify-form\" class=\"form-container\">\n                    <h2>Añadir/Modificar Libro</h2>\n                    <form id=\"librosForm\">\n                        <input type=\"hidden\" id=\"id\" name=\"id\">\n                        <input type=\"text\" id=\"nombre\" name=\"nombre\" placeholder=\"Nombre\" required>\n                        <input type=\"checkbox\" id=\"disponibilidad\" name=\"disponibilidad\"> Disponibilidad\n                \n                        <button type=\"button\" onclick=\"manageLibro('add_modify')\">Enviar</button>\n                    </form>\n                </div>\n                <div id=\"delete-form\" class=\"form-container\">\n                    <h2>Borrar Libro</h2>\n                    <form id=\"deleteForm\">\n                        <input type=\"hidden\" name=\"action\" value=\"delete\">\n                        <input type=\"text\" name=\"id\" placeholder=\"ID\" required>\n                        <button type=\"button\" onclick=\"manageLibro('delete')\">Borrar</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Agregar Libros",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add_modify\",\r\n  \"nombre\": \"Buscando a Wally\",\r\n  \"disponibilidad\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/libros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"libros"
							]
						},
						"description": "Este endpoint permite al usuario crear un nuevo libro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\", \"nombre\" y \"disponibilidad\" para especificar la acción, el nombre y la disponibilidad del libro, respectivamente. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				},
				{
					"name": "Eliminar Libro",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"delete\",\r\n  \"id\": 46\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/libros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"libros"
							]
						},
						"description": "Este endpoint permite al usuario eliminar un libro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\" e \"id\". La clave \"action\" debe establecerse en \"delete\", y la clave \"id\" debe contener el identificador del libro que se desea eliminar. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				}
			]
		},
		{
			"name": "Miembros",
			"item": [
				{
					"name": "mostrar miembros",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/miembros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"miembros"
							]
						},
						"description": "Este endpoint envía una solicitud HTTP GET para recuperar una lista de miembros del servidor. La respuesta de esta solicitud puede documentarse como un esquema JSON para proporcionar una estructura clara de los datos que devuelve la API."
					},
					"response": []
				},
				{
					"name": "Agregar Miembro",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add_modify\",\r\n  \"apellido_nombre\": \"nombre\",\r\n  \"direccion\": \"si\",\r\n  \"telefono\": 555\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/miembros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"miembros"
							]
						},
						"description": "Este endpoint permite al usuario crear un nuevo libro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\", \"apellido_nombre\", \"direccion\" y \"telefono\" para especificar la acción, el nombre, direccion y telefono del empleado, respectivamente. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				},
				{
					"name": "Borrar miembro",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"delete\",\r\n  \"id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/miembros",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"miembros"
							]
						},
						"description": "Este endpoint permite al usuario eliminar un miembro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\" e \"id\". La clave \"action\" debe establecerse en \"delete\", y la clave \"id\" debe contener el identificador del miembro que se desea eliminar. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				}
			]
		},
		{
			"name": "Rentas",
			"item": [
				{
					"name": "mostrar rentas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/rentas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"rentas"
							]
						},
						"description": "Este endpoint envía una solicitud HTTP GET para recuperar una lista de Rentas del servidor. La respuesta de esta solicitud puede documentarse como un esquema JSON para proporcionar una estructura clara de los datos que devuelve la API."
					},
					"response": []
				},
				{
					"name": "Agregar Renta",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add_modify\",\r\n  \"fechainicio\": \"AAAA-MM-DD\",\r\n  \"fechadevolucion\": \"AAAA-MM-DD\",\r\n  \"id_cliente\":\"2\",\r\n  \"id_libro\":\"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/rentas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"rentas"
							]
						},
						"description": "Este endpoint permite al usuario crear un nuevo libro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\", \"fechainicio\" y \"fechadevolucion\", \"id_cliente\", \"id_libro\" para especificar la acción, duracion, cliente y libro de la renta, respectivamente. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				},
				{
					"name": "Borrar renta",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"delete\",\r\n  \"id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"description": "Este endpoint permite al usuario eliminar una renta enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\" e \"id\". La clave \"action\" debe establecerse en \"delete\", y la clave \"id\" debe contener el identificador de la renta que se desea eliminar. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				}
			]
		},
		{
			"name": "Empleados",
			"item": [
				{
					"name": "Listar empleados",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/empleados",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"empleados"
							]
						},
						"description": "Este endpoint envía una solicitud HTTP GET para recuperar una lista de Empleados del servidor. La respuesta de esta solicitud puede documentarse como un esquema JSON para proporcionar una estructura clara de los datos que devuelve la API."
					},
					"response": []
				},
				{
					"name": "Agregar empleado",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add_modify\",\r\n  \"apellido_nombre\": \"nombre\",\r\n  \"direccion\": \"si\",\r\n  \"telefono\": 555,\r\n  \"Dias\": \"hoynomañanasi\",\r\n  \"Horarios\": \"aja\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/empleados",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"empleados"
							]
						},
						"description": "Este endpoint permite al usuario crear un nuevo libro enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\", \"apellido_nombre\", \"direccion\", \"telefono\", \"Dias\" y \"Horarios\" para especificar la acción, el nombre, direccion, telefono, dias y horarios del empleado, respectivamente. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				},
				{
					"name": "Borrar empleado",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"delete\",\r\n  \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/empleados",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"empleados"
							]
						},
						"description": "Este endpoint permite al usuario eliminar un empleado enviando una solicitud HTTP POST a la URL especificada. La solicitud debe incluir un payload JSON en el cuerpo de la solicitud raw, con las claves \"action\" e \"id\". La clave \"action\" debe establecerse en \"delete\", y la clave \"id\" debe contener el identificador del empleado que se desea eliminar. Tras una ejecución exitosa, la respuesta será en forma de un esquema JSON que documenta la estructura de los datos de respuesta."
					},
					"response": []
				}
			]
		}
	]
}